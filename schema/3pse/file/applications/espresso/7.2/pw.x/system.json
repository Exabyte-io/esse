{
    "$id": "3pse/file/applications/espresso/7.2/pw.x/system",
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "system schema",
    "type": "object",
    "additionalProperties": false,
    "anyOf": [
        {
            "properties": {
                "celldm": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    },
                    "minLength": 6,
                    "maxLength": 6
                }
            }
        },
        {
            "properties": {
                "A": {
                    "type": "number"
                },
                "B": {
                    "type": "number"
                },
                "C": {
                    "type": "number"
                },
                "cosAB": {
                    "type": "number"
                },
                "cosAC": {
                    "type": "number"
                },
                "cosBC": {
                    "type": "number"
                }
            }
        }
    ],
    "properties": {
        "ibrav": {
            "type": "integer"
        },
        "nat": {
            "type": "integer",
            "description": "number of atoms in the unit cell (ALL atoms, except if space_group is set, in which case, INEQUIVALENT atoms)"
        },
        "ntyp": {
            "type": "integer",
            "description": "number of types of atoms in the unit cell"
        },
        "nbnd": {
            "type": "integer",
            "description": "Default: for an insulator, nbnd = number of valence bands (nbnd = # of electrons /2); for a metal, 20% more (minimum 4 more)"
        },
        "nbnd_cond": {
            "type": "integer",
            "description": "Default: nbnd_cond = nbnd - # of electrons / 2 in the collinear case; nbnd_cond = nbnd - # of electrons in the noncollinear case."
        },
        "tot_charge": {
            "type": "number",
            "default": 0
        },
        "starting_charge": {
            "type": "number",
            "default": 0,
            "description": "starting charge on atomic type 'i', to create starting potential with startingpot = 'atomic'."
        },
        "tot_magnetization": {
            "type": "number",
            "default": -10000,
            "description": "Total majority spin charge - minority spin charge. Used to impose a specific total electronic magnetization. If unspecified then tot_magnetization variable is ignored and the amount of electronic magnetization is determined during the self-consistent cycle."
        },
        "starting_magnetization": {
            "type": "array",
            "items": {
                "type": "number",
                "default": 0,
                "minimum": -1,
                "maximum": 1
            }
        },
        "ecutwfc": {
            "type": "number",
            "description": "kinetic energy cutoff (Ry) for wavefunctions"
        },
        "ecutrho": {
            "type": "number",
            "description": "Kinetic energy cutoff (Ry) for charge density and potential For norm-conserving pseudopotential you should stick to the default value, you can reduce it by a little but it will introduce noise especially on forces and stress. Default: 4 * ecutwfc"
        },
        "ecutfock": {
            "type": "number",
            "description": "Kinetic energy cutoff (Ry) for the exact exchange operator in EXX type calculations. By default this is the same as ecutrho but in some EXX calculations, a significant speed-up can be obtained by reducing ecutfock, at the expense of some loss in accuracy. Must be .gt. ecutwfc. Not implemented for stress calculation and for US-PP and PAW pseudopotentials."
        },
        "nr1": {
            "type": "integer",
            "description": "Three-dimensional FFT mesh (hard grid) for charge density (and scf potential). If not specified the grid is calculated based on the cutoff for charge density (see also ecutrho)"
        },
        "nr2": {
            "type": "integer",
            "description": "Three-dimensional FFT mesh (hard grid) for charge density (and scf potential). If not specified the grid is calculated based on the cutoff for charge density (see also ecutrho)"
        },
        "nr3": {
            "type": "integer",
            "description": "Three-dimensional FFT mesh (hard grid) for charge density (and scf potential). If not specified the grid is calculated based on the cutoff for charge density (see also ecutrho)"
        },
        "nr1s": {
            "type": "integer",
            "description": "Three-dimensional mesh for wavefunction FFT and for the smooth part of charge density ( smooth grid ). Coincides with nr1, nr2, nr3 if ecutrho = 4 * ecutwfc ( default )"
        },
        "nr2s": {
            "type": "integer",
            "description": "Three-dimensional mesh for wavefunction FFT and for the smooth part of charge density ( smooth grid ). Coincides with nr1, nr2, nr3 if ecutrho = 4 * ecutwfc ( default )"
        },
        "nr3s": {
            "type": "integer",
            "description": "Three-dimensional mesh for wavefunction FFT and for the smooth part of charge density ( smooth grid ). Coincides with nr1, nr2, nr3 if ecutrho = 4 * ecutwfc ( default )"
        },
        "nosym": {
            "type": "boolean",
            "default": false
        },
        "nosym_evc": {
            "type": "boolean",
            "default": false
        },
        "noinv": {
            "type": "boolean",
            "default": false,
            "description": "if (.TRUE.) disable the usage of k => -k symmetry (time reversal) in k-point generation"
        },
        "no_t_rev": {
            "type": "boolean",
            "default": false,
            "description": "if (.TRUE.) disable the usage of magnetic symmetry operations that consist in a rotation + time reversal."
        },
        "force_symmorphic": {
            "type": "boolean",
            "default": false,
            "description": "if (.TRUE.) force the symmetry group to be symmorphic by disabling symmetry operations having an associated fractionary translation"
        },
        "use_all_frac": {
            "type": "boolean",
            "default": false
        },
        "occupations": {
            "type": "string",
            "enum": [
                "smearing",
                "tetrahedra",
                "tetrahedra_lin",
                "tetrahedra_opt",
                "fixed",
                "from_input"
            ]
        },
        "one_atom_occupations": {
            "type": "boolean",
            "default": false
        },
        "starting_spin_angle": {
            "type": "boolean",
            "default": false
        },
        "degauss_cond": {
            "type": "number",
            "default": 0,
            "description": "value of the gaussian spreading (Ry) for brillouin-zone integration in the conduction manifold in a two-chemical potential calculation (twochem=.true.)."
        },
        "nelec_cond": {
            "type": "number",
            "default": 0,
            "description": "Number of electrons placed in the conduction manifold in a two-chemical potential calculation (twochem=.true.). Of the total # of electrons nelec, nelec-nelec_cond will occupy the valence manifold and nelec_cond will be constrained in the conduction manifold."
        },
        "degauss": {
            "type": "number",
            "default": 0,
            "description": "value of the gaussian spreading (Ry) for brillouin-zone integration in metals."
        },
        "smearing": {
            "type": "string",
            "enum": [
                "gaussian",
                "gauss",
                "methfessel-paxton",
                "m-p",
                "mp",
                "marzari-vanderbilt",
                "cold",
                "m-v",
                "mv",
                "fermi-dirac",
                "f-d",
                "fd"
            ],
            "default": "gaussian"
        },
        "nspin": {
            "type": "integer",
            "default": 1
        },
        "sic_gamma": {
            "type": "number",
            "default": 0,
            "description": "Strength of the gammaDFT potential."
        },
        "pol_type": {
            "type": "string",
            "enum": [
                "e",
                "h"
            ],
            "description": "Type of polaron in gammaDFT."
        },
        "sic_energy": {
            "type": "boolean",
            "default": false,
            "description": "Enable the calculation of the total energy in gammaDFT. When .true., a preliminary calculation is performed to calculate the electron density in the absence of the polaron. When .false., the total energy printed in output should not be considered. For structural relaxations, it is recommended to use .false. to avoid doubling the computational cost."
        },
        "sci_vb": {
            "type": "number",
            "default": 0,
            "description": "Valence band shift (in eV) through self-consistent scissor operator. When performing gammaDFT calculations of polarons, the polaron level is not shifted."
        },
        "sci_cb": {
            "type": "number",
            "default": 0,
            "description": "Conduction band band shift (in eV) through self-consistent scissor operator. When performing gammaDFT calculations of polarons, the polaron level is not shifted."
        },
        "noncolin": {
            "type": "boolean",
            "default": false,
            "description": "if .true. the program will perform a noncollinear calculation."
        },
        "ecfixed": {
            "type": "number",
            "default": 0
        },
        "qcutz": {
            "type": "number",
            "default": 0
        },
        "q2sigma": {
            "type": "number",
            "default": 0.1
        },
        "input_dft": {
            "type": "string",
            "description": "Exchange-correlation functional: eg 'PBE', 'BLYP' etc See Modules/funct.f90 for allowed values. Overrides the value read from pseudopotential files. Use with care and if you know what you are doing!"
        },
        "ace": {
            "type": "boolean",
            "default": true,
            "description": "Use Adaptively Compressed Exchange operator as in Lin Lin, J. Chem. Theory Comput. 2016, 12, 2242--2249, doi:10.1021/acs.jctc.6b00092"
        },
        "exx_fraction": {
            "type": "number",
            "description": "Fraction of EXX for hybrid functional calculations. In the case of input_dft='PBE0', the default value is 0.25, while for input_dft='B3LYP' the exx_fraction default value is 0.20."
        },
        "screening_parameter": {
            "type": "number",
            "default": 0.106,
            "description": "screening_parameter for HSE like hybrid functionals."
        },
        "exxdiv_treatment": {
            "type": "string",
            "default": "gygi-baldereschi",
            "enum": [
                "gygi-baldereschi",
                "vcut_spherical",
                "vcut_ws",
                "none"
            ]
        },
        "x_gamma_extrapolation": {
            "type": "boolean",
            "default": true,
            "description": "Specific for EXX. If .true., extrapolate the G=0 term of the potential"
        },
        "ecutvcut": {
            "type": "number",
            "description": "Reciprocal space cutoff for correcting Coulomb potential divergencies at small q vectors."
        },
        "nqx1": {
            "type": "integer",
            "default": 0,
            "description": "Three-dimensional mesh for q (k1-k2) sampling of the Fock operator (EXX). Can be smaller than the number of k-points."
        },
        "nqx2": {
            "type": "integer",
            "description": "Three-dimensional mesh for q (k1-k2) sampling of the Fock operator (EXX). Can be smaller than the number of k-points."
        },
        "nqx3": {
            "type": "integer",
            "description": "Three-dimensional mesh for q (k1-k2) sampling of the Fock operator (EXX). Can be smaller than the number of k-points."
        },
        "localization_thr": {
            "type": "number",
            "default": 0,
            "description": "Overlap threshold over which the exchange integral over a pair of localized orbitals is included in the evaluation of EXX operator. Any value greater than 0.0 triggers the SCDM localization and the evaluation on EXX using the localized orbitals. Very small value of the threshold should yield the same result as the default EXX evaluation"
        },
        "Hubbard_occ": {
            "type": "array",
            "items": {
                "type": "array",
                "items": [
                    {
                        "type": "integer",
                        "minimum": 1
                    },
                    {
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 3
                    },
                    {
                        "type": "number"
                    }
                ]
            }
        },
        "Hubbard_alpha": {
            "type": "array",
            "items": {
                "type": "number",
                "default": 0
            }
        },
        "Hubbard_beta": {
            "type": "array",
            "items": {
                "type": "number",
                "default": 0
            }
        },
        "starting_ns_eigenvalue": {
            "type": "array",
            "items": {
                "type": "array",
                "items": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                }
            }
        },
        "dmft": {
            "type": "boolean",
            "default": false,
            "description": "If true, nscf calculation will exit in restart mode, scf calculation will restart from there if DMFT updates are provided as hdf5 archive. Scf calculation should be used only with electron_maxstep = 1."
        },
        "dmft_prefix": {
            "type": "string",
            "description": "prepended to hdf5 archive: dmft_prefix.h5"
        },
        "ensemble_energies": {
            "type": "boolean",
            "default": false,
            "description": "If ensemble_energies = .true., an ensemble of xc energies is calculated non-selfconsistently for perturbed exchange-enhancement factors and LDA vs. PBE correlation ratios after each converged electronic ground state calculation."
        },
        "edir": {
            "type": "integer",
            "description": "The direction of the electric field or dipole correction is parallel to the bg(:,edir) reciprocal lattice vector, so the potential is constant in planes defined by FFT grid points; edir = 1, 2 or 3. Used only if tefield is .TRUE."
        },
        "emaxpos": {
            "type": "number",
            "default": 0.5,
            "description": "Position of the maximum of the saw-like potential along crystal axis edir, within the  unit cell (see below), 0 < emaxpos < 1 Used only if tefield is .TRUE."
        },
        "eopreg": {
            "type": "number",
            "default": 0.1,
            "description": "Zone in the unit cell where the saw-like potential decreases. ( see below, 0 < eopreg < 1 ). Used only if tefield is .TRUE."
        },
        "eamp": {
            "type": "number",
            "default": 0.001
        },
        "angle1": {
            "type": "array",
            "items": {
                "type": "number"
            },
            "maxItems": 1,
            "minItems": 1,
            "description": "The angle expressed in degrees between the initial magnetization and the z-axis. For noncollinear calculations only; index i runs over the atom types."
        },
        "angle2": {
            "type": "array",
            "items": {
                "type": "number"
            },
            "maxItems": 1,
            "minItems": 1,
            "description": "The angle expressed in degrees between the projection of the initial magnetization on x-y plane and the x-axis. For noncollinear calculations only."
        },
        "lforcet": {
            "type": "boolean",
            "description": "When starting a non collinear calculation using an existing density file from a collinear lsda calculation assumes previous density points in z direction and rotates it in the direction described by angle1 and angle2 variables for atomic type 1"
        },
        "constrained_magnetization": {
            "type": "string",
            "enum": [
                "none",
                "total",
                "atomic",
                "total direction",
                "atomic direction"
            ],
            "default": "none",
            "description": "Used to perform constrained calculations in magnetic systems."
        },
        "fixed_magnetization": {
            "type": "array",
            "items": {
                "type": "number",
                "default": 0
            },
            "maxItems": 3,
            "minItems": 3
        },
        "lambda": {
            "type": "number",
            "default": 1,
            "description": "parameter used for constrained_magnetization calculations N.B.: if the scf calculation does not converge, try to reduce lambda to obtain convergence, then restart the run with a larger lambda"
        },
        "report": {
            "type": "integer",
            "default": -1,
            "description": "determines when atomic magnetic moments are printed on output"
        },
        "lspinorb": {
            "type": "boolean",
            "description": "if .TRUE. the noncollinear code can use a pseudopotential with spin-orbit."
        },
        "assume_isolated": {
            "type": "string",
            "enum": [
                "none",
                "makov-payne",
                "m-p",
                "mp",
                "martyna-tuckerman",
                "m-t",
                "mt",
                "esm",
                "2D"
            ],
            "default": "none",
            "definition": "Used to perform calculation assuming the system to be isolated (a molecule or a cluster in a 3D supercell)"
        },
        "esm_bc": {
            "type": "string",
            "enum": [
                "pbc",
                "bc1",
                "bc2",
                "bc3"
            ],
            "default": "pbc",
            "definition": "If assume_isolated = 'esm', determines the boundary conditions used for either side of the slab."
        },
        "esm_w": {
            "type": "number",
            "default": 0,
            "description": "If assume_isolated = 'esm', determines the position offset [in a.u.] of the start of the effective screening region, measured relative to the cell edge. (ESM region begins at z = +/- [L_z/2 + esm_w] )."
        },
        "esm_efield": {
            "type": "number",
            "default": 0,
            "description": "If assume_isolated = 'esm' and esm_bc = 'bc2', gives the magnitude of the electric field [Ry/a.u.] to be applied between semi-infinite ESM electrodes."
        },
        "esm_nfit": {
            "type": "integer",
            "default": 4,
            "description": "If assume_isolated = 'esm', gives the number of z-grid points for the polynomial fit along the cell edge."
        },
        "lgcscf": {
            "type": "boolean",
            "default": false,
            "description": "If .TRUE. perform a constant bias potential (constant-mu) calculation with Grand-Canonical SCF."
        },
        "gcscf_mu": {
            "type": "number",
            "description": "The target Fermi energy (eV) of GC-SCF. One can start with appropriate total charge of the system by giving tot_charge"
        },
        "gcscf_conv_thr": {
            "type": "number",
            "default": 0.01,
            "description": "Convergence threshold of Fermi energy (eV) for GC-SCF."
        },
        "gcscf_beta": {
            "type": "number",
            "default": 0.05,
            "description": "Mixing factor for GC-SCF. Larger values are recommended, if systems with small DOS on Fermi surface as graphite."
        },
        "vdw_corr": {
            "type": "string",
            "enum": [
                "grimme-d2",
                "Grimme-D2",
                "DFT-D",
                "dft-d",
                "grimme-d3",
                "Grimme-D3",
                "DFT-D3",
                "dft-d3",
                "TS",
                "ts",
                "ts-vdw",
                "ts-vdW",
                "tkatchenko-scheffler",
                "MBD",
                "mbd",
                "many-body-dispersion",
                "mbd_vdw",
                "XDM",
                "xdm"
            ],
            "default": "none",
            "description": "Type of Van der Waals correction"
        },
        "london": {
            "type": "boolean",
            "default": false,
            "description": "OBSOLESCENT, same as vdw_corr='DFT-D'"
        },
        "london_s6": {
            "type": "number",
            "default": 0.75,
            "description": "global scaling parameter for DFT-D. Default is good for PBE."
        },
        "london_c6": {
            "type": "number",
            "description": "atomic C6 coefficient of each atom type"
        },
        "london_rvdw": {
            "type": "number",
            "description": "atomic vdw radii of each atom type"
        },
        "london_rcut": {
            "type": "number",
            "default": 200,
            "description": "cutoff radius (a.u.) for dispersion interactions"
        },
        "dftd3_version": {
            "type": "integer",
            "default": 3,
            "minimum": 2,
            "maximum": 6,
            "description": "Version of Grimme implementation of Grimme-D3"
        },
        "dftd3_threebody": {
            "type": "boolean",
            "default": true,
            "description": "Turn three-body terms in Grimme-D3 on. If .false. two-body contributions only are computed, using two-body parameters of Grimme-D3. If dftd3_version=2, three-body contribution is always disabled."
        },
        "ts_vdw_econv_thr": {
            "type": "number",
            "default": 0.000001,
            "description": "Optional: controls the convergence of the vdW energy (and forces). The default value is a safe choice, likely too safe, but you do not gain much in increasing it"
        },
        "ts_vdw_isolated": {
            "type": "boolean",
            "default": false,
            "description": "Optional: set it to .TRUE. when computing the Tkatchenko-Scheffler vdW energy or the Many-Body dispersion (MBD) energy for an isolated (non-periodic) system."
        },
        "xdm": {
            "type": "boolean",
            "default": false,
            "description": "OBSOLESCENT, same as vdw_corr='xdm'"
        },
        "xdm_a1": {
            "type": "number",
            "default": 0.6836,
            "description": "Damping function parameter a1 (adimensional)"
        },
        "xdm_a2": {
            "type": "number",
            "default": 1.5045,
            "description": "Damping function parameter a2 (angstrom)"
        },
        "space_group": {
            "type": "integer",
            "default": 0,
            "description": "The number of the space group of the crystal, as given in the International Tables of Crystallography A (ITA)"
        },
        "uniqueb": {
            "type": "boolean",
            "default": false,
            "description": "Used only for monoclinic lattices"
        },
        "origin_choice": {
            "type": "integer",
            "default": 1,
            "description": "Used only for space groups that in the ITA allow the use of two different origins"
        },
        "rhombohedral": {
            "type": "boolean",
            "default": true,
            "description": "Used only for rhombohedral space groups."
        },
        "zgate": {
            "type": "number",
            "default": 0.5,
            "description": "used only if gate = .TRUE."
        },
        "relaxz": {
            "type": "boolean",
            "default": false,
            "description": "used only if gate = .TRUE."
        },
        "block": {
            "type": "boolean",
            "default": false,
            "description": "used only if gate = .TRUE."
        },
        "block_1": {
            "type": "number",
            "default": 0.45,
            "description": "used only if gate = .TRUE. and block = .TRUE."
        },
        "block_2": {
            "type": "number",
            "default": 0.55,
            "description": "used only if gate = .TRUE. and block = .TRUE."
        },
        "block_height": {
            "type": "number",
            "default": 0.1,
            "description": "used only if gate = .TRUE. and block = .TRUE."
        },
        "nextffield": {
            "type": "integer",
            "default": 0,
            "description": "Number of activated external ionic force fields."
        }
    },
    "required": [
        "ibrav",
        "nat",
        "ntyp",
        "ecutwfc"
    ]
}
